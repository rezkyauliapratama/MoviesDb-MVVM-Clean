apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion target_sdk_version
    defaultConfig {
        applicationId "id.co.rezkyauliapratama.rk_moviesdb_mvvm"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "environment"
    productFlavors {
        mock {
            dimension "environment"
            applicationIdSuffix ".mock"
            resValue "string", "app_name", "skeleton(MOCK)"
        }

        development {
            dimension "environment"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "skeleton(DEV)"
        }

        staging {
            dimension "environment"
            applicationIdSuffix ".stage"
            resValue "string", "app_name", "skeleton(STAGE)"
        }

        production {
            dimension "environment"
            resValue "string", "app_name", "sekeleton"
            // TODO: Fill with actual production API URL

        }
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android X
    implementation "androidx.core:core-ktx:$kotlin_core_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "com.google.android.material:material:$material_component_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    debugImplementation "androidx.test:runner:$test_runner_version"
    testImplementation "junit:junit:$junit_version"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "com.jakewharton.rxbinding2:rxbinding:$rxbinding_version"

    // Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_version"

    // Navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$navigation_version"
}

Properties props = new Properties()
def propFile = new File('secret.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('hostBaseUrl') && props.containsKey('webClientId')) {
        android.defaultConfig.buildConfigField 'String', 'DATABASE_NAME', props['databaseName']
        android.productFlavors.mock.buildConfigField 'String', 'API_BASE_URL', props['hostBaseUrl']
        android.productFlavors.development.buildConfigField 'String', 'API_BASE_URL', props['hostBaseUrl']
        android.productFlavors.staging.buildConfigField 'String', 'API_BASE_URL', props['hostBaseUrl']
        android.productFlavors.production.buildConfigField 'String', 'API_BASE_URL', props['hostBaseUrl']
    } else {
        println 'signing.properties found but some entries are missing'
        android.defaultConfig.buildConfigField 'String', 'DATABASE_NAME', "default"
        android.productFlavors.mock.buildConfigField 'String', 'API_BASE_URL', null
        android.productFlavors.development.buildConfigField 'String', 'API_BASE_URL', null
        android.productFlavors.staging.buildConfigField 'String', 'API_BASE_URL', null
        android.productFlavors.production.buildConfigField 'String', 'API_BASE_URL', null
    }
}else {
    println 'signing.properties not found'
    android.defaultConfig.buildConfigField 'String', 'DATABASE_NAME', "default"
    android.productFlavors.mock.buildConfigField 'String', 'API_BASE_URL', null
    android.productFlavors.development.buildConfigField 'String', 'API_BASE_URL', null
    android.productFlavors.staging.buildConfigField 'String', 'API_BASE_URL', null
    android.productFlavors.production.buildConfigField 'String', 'API_BASE_URL', null}

