apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["targetSdkVersion"]
    defaultConfig {
        applicationId "id.co.rezkyauliapratama.rk_moviesdb_mvvm"
        minSdkVersion globalConfiguration["minSdkVersion"]
        targetSdkVersion globalConfiguration["targetSdkVersion"]
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "environment"
    productFlavors {
        mock {
            dimension "environment"
            applicationIdSuffix ".mock"
            resValue "string", "app_name", "skeleton(MOCK)"
        }

        development {
            dimension "environment"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "skeleton(DEV)"
        }

        staging {
            dimension "environment"
            applicationIdSuffix ".stage"
            resValue "string", "app_name", "skeleton(STAGE)"
        }

        production {
            dimension "environment"
            resValue "string", "app_name", "sekeleton"
            // TODO: Fill with actual production API URL

        }
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    def appDependencies = rootProject.ext.appDependencies
    def appTestDependencies= rootProject.ext.appTestDependencies

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Android X
    implementation appDependencies.androidCore
    implementation appDependencies.appcompat
    implementation appDependencies.constraintLayout
    implementation appDependencies.lifecycleExtensions
    implementation appDependencies.roomRuntime
    implementation appDependencies.materialComponent
    implementation appDependencies.legacySupport
    kapt appDependencies.roomCompiler
    implementation appDependencies.roomRxJava2
    debugImplementation appTestDependencies.testRunner
    testImplementation appTestDependencies.junit

    // Kotlin
    implementation appDependencies.kotlinStdlib

    // Rx
    implementation appDependencies.rxJava2
    implementation appDependencies.rxAndroid
    implementation appDependencies.rxBinding

    // Dagger
    implementation appDependencies.dagger
    kapt appDependencies.daggerCompiler

    // Retrofit
    implementation appDependencies.retrofit
    implementation appDependencies.retrofitConverterJson
    implementation appDependencies.retrofitAdapterRxJava2
    implementation appDependencies.okhttpInterceptor

    // Navigation
    implementation appDependencies.navigationFragment
    implementation appDependencies.navigationKtx
}

Properties props = new Properties()
def propFile = new File('secret.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('hostBaseUrl') && props.containsKey('webClientId')) {
        android.defaultConfig.buildConfigField 'String', 'DATABASE_NAME', props['databaseName']
        android.productFlavors.mock.buildConfigField 'String', 'API_BASE_URL', props['hostBaseUrl']
        android.productFlavors.development.buildConfigField 'String', 'API_BASE_URL', props['hostBaseUrl']
        android.productFlavors.staging.buildConfigField 'String', 'API_BASE_URL', props['hostBaseUrl']
        android.productFlavors.production.buildConfigField 'String', 'API_BASE_URL', props['hostBaseUrl']
    } else {
        println 'signing.properties found but some entries are missing'
        android.defaultConfig.buildConfigField 'String', 'DATABASE_NAME', "default"
        android.productFlavors.mock.buildConfigField 'String', 'API_BASE_URL', null
        android.productFlavors.development.buildConfigField 'String', 'API_BASE_URL', null
        android.productFlavors.staging.buildConfigField 'String', 'API_BASE_URL', null
        android.productFlavors.production.buildConfigField 'String', 'API_BASE_URL', null
    }
}else {
    println 'signing.properties not found'
    android.defaultConfig.buildConfigField 'String', 'DATABASE_NAME', "default"
    android.productFlavors.mock.buildConfigField 'String', 'API_BASE_URL', null
    android.productFlavors.development.buildConfigField 'String', 'API_BASE_URL', null
    android.productFlavors.staging.buildConfigField 'String', 'API_BASE_URL', null
    android.productFlavors.production.buildConfigField 'String', 'API_BASE_URL', null}

